name: üöÄ Train RASA Model

# Set permissions for the workflow
permissions:
  contents: read
  packages: write  # If pushing Docker images
  actions: write  # For workflow dispatch
  checks: write   # For status checks
  statuses: write # For commit statuses

on:
  push:
    paths:
      - 'rasa/**'
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      force_retrain:
        description: 'Force retrain model (even if no changes)'
        required: false
        default: 'false'
        type: boolean

# Cancel previous runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  RASA_VERSION: '3.7.0'

jobs:
  train:
    name: üõ†Ô∏è Train RASA Model
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: üîÑ Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Required for git diff in the training step
        token: ${{ secrets.GITHUB_TOKEN }}  # Explicitly use GITHUB_TOKEN

    - name: üêç Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: üì¶ Cache pip packages
      uses: actions/cache@v3
      id: pip-cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-


    - name: üì¶ Cache Rasa models
      uses: actions/cache@v3
      id: rasa-cache
      with:
        path: rasa/models/
        key: ${{ runner.os }}-rasa-models-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-rasa-models-${{ github.ref }}-


    - name: ‚öôÔ∏è Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "rasa[full]==${{ env.RASA_VERSION }}" \
                    black \
                    isort \
                    mypy \
                    pylint \
                    pytest \
                    pytest-cov

    - name: üîç Validate RASA data
      working-directory: rasa
      run: |
        rasa data validate --quiet || (echo "‚ùå Rasa data validation failed" && exit 1)
        rasa test nlu --nlu data/ --cross-validation --quiet || (echo "‚ùå NLU cross-validation failed" && exit 1)

    - name: üöÄ Train RASA model
      working-directory: rasa
      env:
        RASA_ENVIRONMENT: ${{ secrets.RASA_ENVIRONMENT || 'production' }}
        RASA_JWT_SECRET: ${{ secrets.RASA_JWT_SECRET }}
        RASA_TELEMETRY_ENABLED: 'false'
      run: |
        # Skip training if no changes and not forced
        if [ "${{ github.event_name != 'workflow_dispatch' || !github.event.inputs.force_retrain }}" = "true" ] && \
           [ -n "$(git diff --name-only HEAD^ HEAD -- rasa/)" ]; then
          echo "No changes detected in Rasa files. Skipping training."
          exit 0
        fi
        
        rasa train --quiet --fixed-model-name "model-${{ github.run_id }}" \
                   --fail-on-warnings \
                   --enable-gpu

    - name: üß™ Test trained model
      working-directory: rasa
      run: |
        rasa test nlu --nlu data/ --model models/ --out results/nlu || \
        (echo "‚ùå Model testing failed" && exit 1)
        
        # Run end-to-end tests if you have them
        # rasa test --stories tests/ --out results/end2end

    - name: üìä Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: rasa/results/
        retention-days: 7

    - name: üì¶ Upload model artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: rasa-model
        path: rasa/models/
        retention-days: 5
        if-no-files-found: error
        compression-level: 9
        overwrite: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ensure artifact upload uses token

    - name: üö® Notify on failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_COLOR: '#FF0000'
        SLACK_TITLE: '‚ùå Rasa Training Failed'
        SLACK_MESSAGE: 'Workflow ${{ github.workflow }} failed on ${{ github.ref }}'
        MSG_MINIMAL: 'View the run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      continue-on-error: true  # Don't fail the workflow if notification fails

    # Uncomment and configure when ready for deployment
    # - name: üöÄ Deploy model
    #   if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # For API access
    #     DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
    #   run: |
    #     # Add your deployment script here
    #     echo "Deploying model to production..."
    #     # Example: gh release create v1.0.0 ./path/to/model.tar.gz --generate-notes
    #   permissions:
    #     contents: write  # Required for creating releases
