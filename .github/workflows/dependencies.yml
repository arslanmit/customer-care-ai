name: Update Dependencies

on:
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual trigger'

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      updates_available: ${{ steps.update-summary.outputs.updates_available }}
      pr_number: ${{ steps.create-pr.outputs.pr_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for proper git history in PRs
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        id: cache-python
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Set up Python
        id: python-setup
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'
          
      - name: Update Python dependencies
        id: update-python
        continue-on-error: true
        run: |
          echo "🔍 Checking for Python dependency updates..."
          pip install --upgrade pip pip-review
          
          echo "::group::📋 Current Python Dependencies"
          pip list
          echo "::endgroup::"
          
          if pip-review --auto --stdout; then
            echo "✨ Updates found! Updating requirements.txt..."
            pip-review --auto --yes
            pip freeze > requirements.txt
            echo "python_updated=true" >> $GITHUB_OUTPUT
            echo "PYTHON_UPDATES=true" >> $GITHUB_ENV
            
            echo "::group::📋 Updated Python Dependencies"
            pip list
            echo "::endgroup::"
          else
            echo "✅ Python dependencies are up to date"
            echo "python_updated=false" >> $GITHUB_OUTPUT
            echo "PYTHON_UPDATES=false" >> $GITHUB_ENV
          fi
          
      - name: Check for frontend directory
        id: check-frontend
        run: |
          if [ -d "frontend" ]; then
            echo "📁 Frontend directory found"
            echo "frontend_exists=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️  No frontend directory found, skipping Node.js updates"
            echo "frontend_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Cache Node.js dependencies
        if: steps.check-frontend.outputs.frontend_exists == 'true'
        uses: actions/cache@v3
        id: cache-node
        with:
          path: |
            frontend/node_modules
            frontend/.npm
            ${{ runner.home }}/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Set up Node.js
        if: steps.check-frontend.outputs.frontend_exists == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      - name: Update Node.js dependencies
        if: steps.check-frontend.outputs.frontend_exists == 'true'
        id: update-node
        continue-on-error: true
        working-directory: frontend
        run: |
          echo "🔍 Checking for Node.js dependency updates..."
          npm install -g npm-check-updates
          
          echo "::group::📋 Current Node.js Dependencies"
          npm list --depth=0
          echo "::endgroup::"
          
          if ncu -u; then
            echo "✨ Updates found! Updating package.json..."
            npm install
            echo "node_updated=true" >> $GITHUB_OUTPUT
            echo "NODE_UPDATES=true" >> $GITHUB_ENV
            
            echo "::group::📋 Updated Node.js Dependencies"
            npm list --depth=0
            echo "::endgroup::"
          else
            echo "✅ Node.js dependencies are up to date"
            echo "node_updated=false" >> $GITHUB_OUTPUT
            echo "NODE_UPDATES=false" >> $GITHUB_ENV
          fi
          
      - name: Create update summary
        id: update-summary
        run: |
          if [[ "${{ env.PYTHON_UPDATES }}" == "true" || "${{ env.NODE_UPDATES }}" == "true" ]]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            
            # Generate changelog
            echo "## 📝 Dependency Update Summary" > update-summary.md
            echo "" >> update-summary.md
            
            if [[ "${{ env.PYTHON_UPDATES }}" == "true" ]]; then
              echo "### Python Updates" >> update-summary.md
              pip list --outdated --format=columns >> update-summary.md || echo "No detailed update info available"
              echo "" >> update-summary.md
            fi
            
            if [[ "${{ env.NODE_UPDATES }}" == "true" ]]; then
              echo "### Node.js Updates" >> update-summary.md
              cd frontend
              npx npm-check --skip-unused 2>/dev/null || echo "No detailed update info available" >> ../update-summary.md
              cd ..
              echo "" >> update-summary.md
            fi
            
            echo "" >> update-summary.md
            echo "---" >> update-summary.md
            echo "*🤖 Automated dependency update*" >> update-summary.md
            echo "*Triggered by: ${{ github.event_name == 'workflow_dispatch' && format('Manual trigger: {0}', github.event.inputs.reason) || 'Scheduled run' }}*" >> update-summary.md
          else
            echo "ℹ️  No dependency updates available"
            echo "updates_available=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Pull Request
        if: steps.update-summary.outputs.updates_available == 'true'
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore(deps): update dependencies
            
            - Python: ${{ env.PYTHON_UPDATES == 'true' && 'updated' || 'up-to-date' }}
            - Node.js: ${{ env.NODE_UPDATES == 'true' && 'updated' || 'up-to-date' }}
          title: "chore(deps): update dependencies"
          body: file://update-summary.md
          branch: "deps/update-$(date +%s)"
          delete-branch: true
          labels: dependencies, automated
          
      - name: Update status file
        run: |
          mkdir -p .github
          echo "# 📦 Dependency Update Status" > .github/dependencies-status.md
          echo "" >> .github/dependencies-status.md
          echo "Last run: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> .github/dependencies-status.md
          echo "" >> .github/dependencies-status.md
          echo "## Update Status" >> .github/dependencies-status.md
          echo "- Python: ${{ env.PYTHON_UPDATES == 'true' ? '✅ Updated' : '✅ Up to date' }}" >> .github/dependencies-status.md
          echo "- Node.js: ${{ env.NODE_UPDATES == 'true' ? '✅ Updated' : env.NODE_UPDATES == 'false' ? '✅ Up to date' : '⏭️  Skipped (no frontend)' }}" >> .github/dependencies-status.md
          
          if [[ -f "update-summary.md" ]]; then
            echo "" >> .github/dependencies-status.md
            echo "## Changes" >> .github/dependencies-status.md
            cat update-summary.md >> .github/dependencies-status.md
          fi
          
          echo "" >> .github/dependencies-status.md
          echo "---" >> .github/dependencies-status.md
          echo "*Last updated: $(date -u +'%Y-%m-%d %H:%M:%S UTC') | [View Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*" >> .github/dependencies-status.md
          
          # Add to git if there are changes
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .github/dependencies-status.md
          git commit -m "docs: update dependency status" || echo "No status changes to commit"
          git push || echo "No changes to push"
          
      - name: Comment on PR if no updates
        if: steps.update-summary.outputs.updates_available != 'true' && github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const hasExistingComment = comments.some(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('No dependency updates available')
            );
            
            if (!hasExistingComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '✅ All dependencies are up to date! No updates available.'
              });
            }
