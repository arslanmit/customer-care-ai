name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_IMAGE: ${{ vars.CONTAINER_REGISTRY }}/${{ github.repository }}
  DOCKER_TAG: ${{ github.sha }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort
          
      - name: Run linters
        run: |
          black --check backend/
          flake8 backend/
          isort --check-only backend/

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Generate requirements.txt if not exists
        run: |
          if [ ! -f "backend/requirements.txt" ]; then
            echo "# Auto-generated requirements.txt" > backend/requirements.txt
            echo "rasa>=3.7.0" >> backend/requirements.txt
            echo "fastapi>=0.68.0" >> backend/requirements.txt
            echo "uvicorn>=0.15.0" >> backend/requirements.txt
            echo "python-multipart>=0.0.5" >> backend/requirements.txt
          fi
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt pytest pytest-cov psycopg2-binary
          
      - name: Run tests with coverage
        run: |
          cd backend
          python -m pytest --cov=. --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          fail_ci_if_error: false

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies and build
        run: |
          cd frontend
          npm ci
          npm run build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build
          retention-days: 5

  build-and-deploy:
    name: Build & Deploy
    needs: [lint, test, build-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://your-production-url.com' || 'https://staging.your-app.com' }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/main'
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=./kubeconfig.yaml
          kubectl set image deployment/customer-care-ai customer-care-ai=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --record
          
      - name: Notify deployment
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_TITLE: "Deployment ${{ job.status }}"
          SLACK_MESSAGE: "${{ github.workflow }} workflow ${{ job.status }} for ${{ github.repository }}@${{ github.sha }}"
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
