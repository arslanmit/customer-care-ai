# Cloud Run service configuration for Customer Care AI
# This file defines the Cloud Run service and its configuration

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: customer-care-ai
  labels:
    app: customer-care-ai
    env: production
    managed-by: cloud-build
  annotations:
    # Auto-scale to zero when not in use
    run.googleapis.com/startup-cpu-boost: 'true'
    # Use VPC connector if needed
    # run.googleapis.com/vpc-connector: projects/PROJECT_ID/locations/REGION/connectors/CONNECTOR_NAME
    # Allocate more memory if needed
    # run.googleapis.com/cloudsql-instances: PROJECT_ID:REGION:INSTANCE_NAME
    # Enable HTTP/2
    run.googleapis.com/h2c: 'true'
    # Configure session affinity
    run.googleapis.com/sessionAffinity: 'true'
    # Configure CPU throttling
    run.googleapis.com/execution-environment: 'gen2'
    # Configure container startup timeout (default: 240s)
    run.googleapis.com/startup-cpu-boost-timeout: '300s'
    # Configure container liveness probe
    run.googleapis.com/cloud-run-session-affinity: 'true'
spec:
  template:
    metadata:
      annotations:
        # Auto-scale to zero when not in use
        autoscaling.knative.dev/minScale: '0'
        autoscaling.knative.dev/maxScale: '10'
        # Scale up quickly when needed
        autoscaling.knative.dev/target: '80'
        # Configure graceful shutdown
        run.googleapis.com/cloudsql-instances: ${_CLOUDSQL_INSTANCE}
      labels:
        version: BUILD_ID_SHORT_PLACEHOLDER
        build: BUILD_ID_PLACEHOLDER
    spec:
      containerConcurrency: 80
      timeoutSeconds: 300
      serviceAccountName: ${_SERVICE_ACCOUNT}
      containers:
      - image: ${_GCR_HOSTNAME}/${PROJECT_ID}/${_SERVICE_NAME}:BUILD_ID_PLACEHOLDER
        ports:
        - name: http1
          containerPort: 8080
        resources:
          limits:
            cpu: 2000m
            memory: 2Gi
        env:
        - name: PORT
          value: '8080'
        - name: RASA_ENVIRONMENT
          value: 'production'
        - name: RASA_ACTIONS_URL
          value: ${_ACTIONS_SERVICE_URL}

        - name: DB_HOST
          value: '${_CLOUDSQL_INSTANCE}'
        - name: DB_NAME
          value: 'customer_care_ai'
        - name: DB_USER
          value: 'postgres'
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: 'db-password'
              key: 'latest'
        - name: CORS_ORIGINS
          value: '["*"]'  # Restrict this in production
        - name: DEBUG
          value: 'false'
        - name: LOG_LEVEL
          value: 'INFO'
        - name: ENABLE_METRICS
          value: 'true'
        # Add any other environment variables needed by your application
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30  # Allow up to 2.5 minutes for startup
      # Configure VPC access if needed
      # vpcAccess:
      #   connector: projects/PROJECT_ID/locations/REGION/connectors/CONNECTOR_NAME
      #   egress: all-traffic
      # Configure container environment variables from secrets
      # volumes:
      # - name: google-cloud-key
      #   secret:
      #     secretName: google-cloud-key
      # containers:
      # - volumeMounts:
      #   - name: google-cloud-key
      #     mountPath: /var/secrets/google
      #   env:
      #   - name: GOOGLE_APPLICATION_CREDENTIALS
      #     value: /var/secrets/google/key.json
  traffic:
  - percent: 100
    latestRevision: true
    # Uncomment to configure traffic splitting
    # - revisionName: customer-care-ai-00001-xyz
    #   percent: 10
    #   tag: canary

---
# Secret for JWT authentication
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
type: Opaque
data:
  # Generate with: echo -n "your-secret-key" | base64
  jwt-secret: eW91ci1zZWNyZXQta2V5LWNoYW5nZS1tZQo=

---
# IAM policy for the service account
apiVersion: iam.cnrm.cloud.google.com/v1beta1
kind: IAMPolicyMember
metadata:
  name: customer-care-ai-iam
spec:
  member: serviceAccount:${_SERVICE_ACCOUNT}
  role: roles/run.invoker
  resourceRef:
    apiVersion: resourcemanager.cnrm.cloud.google.com/v1beta1
    kind: Project
    external: projects/${PROJECT_ID}
