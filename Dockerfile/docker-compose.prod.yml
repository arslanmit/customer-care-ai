version: '3.8'

# Security defaults
x-security: &security-defaults
  security_opt:
    - no-new-privileges:true
  read_only: true
  tmpfs:
    - /tmp
    - /run
    - /var/run
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - SETGID
    - SETUID
    - NET_BIND_SERVICE
  ulimits:
    nofile:
      soft: 65535
      hard: 65535
  stop_grace_period: 30s
  stop_signal: SIGTERM
  healthcheck:
    test: ["CMD-SHELL", "exit 0"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 10s

# Define common environment variables
x-common-env: &common-env
  TZ: ${TZ:-UTC}
  PYTHONUNBUFFERED: 1
  PYTHONPATH: /app

# Define common logging configuration
x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # Rasa Server
  rasa:
    build:
      context: ..
      dockerfile: Dockerfile/Dockerfile.rasa
      args:
        - UID=1000
        - GID=1000
    container_name: rasa_server
    hostname: rasa
    domainname: customer-care-ai.local
    restart: unless-stnz
    env_file: ../.env
    environment:
      <<: *common-env
      RASA_ENVIRONMENT: ${RASA_ENVIRONMENT:-production}
      RASA_MODEL: ${RASA_MODEL:-/app/models}
      RASA_LOG_LEVEL: ${RASA_LOG_LEVEL:-INFO}
      RASA_REMOTE_STORAGE: /app/data
      USER_NAME: ${RASA_USER:-admin}
      PASSWORD: ${RASA_PASSWORD:-change-me}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      CORS_ORIGINS: ${CORS_ORIGINS:-'*'}
      DB_URL: ${SUPABASE_DB_URL}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SSL: ${REDIS_SSL:-true}
      SESSION_SECURE: ${SESSION_SECURE:-true}
      SESSION_HTTPONLY: ${SESSION_HTTPONLY:-true}
      SESSION_SAMESITE: ${SESSION_SAMESITE:-Lax}
      CSRF_SECRET: ${CSRF_SECRET}
    <<: *security-defaults
    security_opt:
      - no-new-privileges:true
      - apparmor=unconfined
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    ports:
      - "5005:5005"
    volumes:
      - rasa_data:/app/data
      - ../models:/app/models:ro
      - ../config:/app/config:ro
      - ../domain.yml:/app/domain.yml:ro
      - ../config/credentials.yml:/app/credentials.yml:ro
      - ../config/endpoints.yml:/app/endpoints.yml:ro
      - ../config/config.yml:/app/config.yml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      redis:
        condition: service_healthy
      actions:
        condition: service_started
    logging: *logging
    networks:
      - rasanet

  # Rasa Actions Server
  actions:
    build:
      context: ..
      dockerfile: Dockerfile/Dockerfile.actions
      args:
        - UID=1000
        - GID=1000
    container_name: rasa_actions
    hostname: actions
    domainname: customer-care-ai.local
    restart: unless-stopped
    env_file: ../.env
    environment:
      <<: *common-env
      SANIC_WORKERS: ${SANIC_WORKERS:-1}
      RASA_ACTIONS_PORT: ${RASA_ACTIONS_PORT:-5055}
      RASA_ACTIONS_LOG_LEVEL: ${RASA_LOG_LEVEL:-INFO}
      DB_URL: ${SUPABASE_DB_URL}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_SSL: ${REDIS_SSL:-true}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
    <<: *security-defaults
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
      - apparmor=unconfined
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
      - /run
      - /var/run
    volumes:
      - actions_data:/app/actions:ro
      - ../data/actions:/app/data
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
    ports:
      - "${RASA_ACTIONS_PORT:-5055}:5055"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5055"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging: *logging
    networks:
      - rasanet

  # Redis for Rasa Tracker Store and Lock Store
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *logging
    networks:
      - rasanet


  # Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
    container_name: frontend
    restart: unless-stopped
    env_file: ../.env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5005}
    ports:
      - "3000:3000"
    depends_on:
      - rasa
    logging: *logging
    networks:
      - rasanet

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ../monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_METRICS_PORT:-9090}:9090"
    depends_on:
      - rasa
      - actions
    logging: *logging
    networks:
      - rasanet

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    depends_on:
      - prometheus
    logging: *logging
    networks:
      - rasanet

# Define networks
networks:
  rasanet:
    driver: bridge

# Define volumes
volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  rasa_data:
  actions_data:
