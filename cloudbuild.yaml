steps:
  # Install dependencies
  - name: 'gcr.io/cloud-builders/apt'
    args: ['update']
    id: 'apt-update'
    waitFor: ['-']

  # Restore build cache from GCS
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        mkdir -p /tmp/buildkit
        gsutil -m cp -r gs://${PROJECT_ID}_cloudbuild/cache/* /tmp/buildkit/ || echo "No cache found, continuing with empty cache"
    id: 'restore-cache'
    waitFor: ['-']

  # Build the container image with buildkit for better caching
  - name: 'gcr.io/cloud-builders/docker'
    waitFor: ['restore-cache']
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Set up Docker Buildx
        docker buildx create --use
        
        # Configure GCS cache backend
        echo '{"max-size": "10g", "mode": "max", "type": "local", "dest": "/tmp/buildkit"}' > /tmp/buildkit-config.json
        
        # Build with caching
        docker buildx build \
          --platform linux/amd64 \
          -t gcr.io/$PROJECT_ID/github.com/arslanmit/customer-care-ai:$COMMIT_SHA \
          -t gcr.io/$PROJECT_ID/github.com/arslanmit/customer-care-ai:latest \
          --build-arg COMMIT_SHA=$COMMIT_SHA \
          --build-arg PROJECT_ID=$PROJECT_ID \
          --build-arg SHORT_SHA=${COMMIT_SHA:0:7} \
          --cache-from type=local,src=/tmp/buildkit \
          --cache-to type=local,dest=/tmp/buildkit-new,mode=max \
          --push \
          .
        
        # Save cache to GCS
        gsutil -m cp -r /tmp/buildkit-new/* gs://${PROJECT_ID}_cloudbuild/cache/ || true
    id: 'build'
    env:
      - 'DOCKER_BUILDKIT=1'
      - 'COMPOSE_DOCKER_CLI_BUILD=1'

  # Verify the built image
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'run'
      - '--rm'
      - 'gcr.io/$PROJECT_ID/github.com/arslanmit/customer-care-ai:$COMMIT_SHA'
      - 'python'
      - '-c'
      - 'import rasa; print(f"Rasa version: {rasa.__version__}")'
    id: 'verify'
    waitFor: ['build']

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-rasa'
    args:
      - 'run'
      - 'services'
      - 'replace'
      - 'cloudrun.yaml'
      - '--region=$_REGION'
      - '--project=$PROJECT_ID'
      - '--platform=managed'
      - '--quiet'
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
      - 'CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=/workspace/cloudbuild-sa.json'
    waitFor: ['verify']
    
  # Update environment variables for the Cloud Run service
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'update-service-env'
    args:
      - 'run'
      - 'services'
      - 'update'
      - 'customer-care-ai'
      - '--region=$_REGION'
      - '--project=$PROJECT_ID'
      - '--platform=managed'
      - '--update-env-vars=PORT=8080,ENVIRONMENT=production'
      - '--quiet'
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
      - 'CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=/workspace/cloudbuild-sa.json'
    waitFor: ['deploy-rasa']
    
  # Grant public access to the service
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'allow-public-access'
    args:
      - 'run'
      - 'services'
      - 'add-iam-policy-binding'
      - 'customer-care-ai'
      - '--region=$_REGION'
      - '--project=$PROJECT_ID'
      - '--platform=managed'
      - '--member=allUsers'
      - '--role=roles/run.invoker'
      - '--quiet'
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'
      - 'CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=/workspace/cloudbuild-sa.json'
    waitFor: ['update-service-env']

# Configure build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # More powerful machine for faster builds
  diskSizeGb: '100'  # Increased disk size for build cache
  env:
    - 'PYTHONUNBUFFERED=1'
    - 'DOCKER_BUILDKIT=1'
    - 'COMPOSE_DOCKER_CLI_BUILD=1'
    - 'BUILDKIT_INLINE_CACHE=1'
  # Add the service account key as a secret
  secretEnv: ['GCP_SA_KEY']
  # Mount the service account key
  volumes:
    - name: 'gcp-key'
      path: /workspace/cloudbuild-sa.json
      secret:
        secretName: 'gcp-key'
        items:
          - key: 'key'
            path: 'cloudbuild-sa.json'

# Timeout for the build (in seconds)
timeout: 3600s  # 60 minutes

# Service account for Cloud Build
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloudbuild@$PROJECT_ID.iam.gserviceaccount.com'

# Store images in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/github.com/arslanmit/customer-care-ai:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/github.com/arslanmit/customer-care-ai:latest'
  - 'gcr.io/$PROJECT_ID/github.com/arslanmit/customer-care-ai:buildcache'

# IAM roles required by the build service account
# Add these roles to your build service account:
# - roles/container.developer
# - roles/cloudbuild.builds.builder
# - roles/storage.admin
# - roles/cloudkms.cryptoKeyDecrypter (if using KMS)
# - roles/secretmanager.secretAccessor (if using Secret Manager)

# Add substitutions that can be used in build steps
substitutions:
  _SERVICE_NAME: 'customer-care-ai'
  _REGION: 'europe-west1'
  _CACHE_BUCKET: '${PROJECT_ID}_cloudbuild'
  _GCR_HOSTNAME: 'gcr.io'
  _REPOSITORY: 'github.com/arslanmit/customer-care-ai'
  _SERVICE_ACCOUNT: 'customer-care-ai@${PROJECT_ID}.iam.gserviceaccount.com'
  _ACTIONS_SERVICE_URL: 'https://actions-${_SERVICE_NAME}-${COMMIT_SHA:0:8}-${_REGION}.run.app'
  _CLOUDSQL_INSTANCE: '${PROJECT_ID}:${_REGION}:customer-care-ai-db'

# Add tags for better organization and filtering
tags:
  - 'rasa'
  - 'customer-care-ai'
  - 'production'
  - 'gcr'

# Cache configuration for faster builds
# This requires a Cloud Storage bucket for build cache
# Uncomment and update the bucket name if you want to use build cache
# availableSecrets:
#   secretManager:
#   - versionName: projects/$PROJECT_ID/secrets/MY_SECRET/versions/1
#     env: 'MY_SECRET'

# Uncomment to use a specific service account with the required permissions
# serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloudbuild@$PROJECT_ID.iam.gserviceaccount.com'
